@model devmgr.Models.FLOW_PROJMO

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>添加</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>项目模块</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.projectid_fx, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.projectid_fx, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.projectid_fx, "", new { @class = "text-danger" })*@
                @{SelectList categoryproj = (SelectList)ViewData["categories_proj"];}
                @Html.DropDownListFor(model => model.projectid_fx, categoryproj, "--请选择--", new { htmlAttributes = new { @class = "form-control" } })


            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.responserid_fx, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.responserid_fx, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.responserid_fx, "", new { @class = "text-danger" })*@
                @{SelectList categoryuser = (SelectList)ViewData["categories_user"];}
                @Html.DropDownListFor(model => model.responserid_fx, categoryuser, "--请选择--", new { htmlAttributes = new { @class = "form-control" } })


            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.startdate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.startdate, new { htmlAttributes = new { @class = "form-control" ,id= "datepicker1" } })
                @Html.ValidationMessageFor(model => model.startdate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.enddate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.enddate, new { htmlAttributes = new { @class = "form-control" ,id= "datepicker2" } })
                @Html.ValidationMessageFor(model => model.enddate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.request_text, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.request_text, new { htmlAttributes = new {  } })
                @Html.ValidationMessageFor(model => model.request_text, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.remark, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.remark, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.remark, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.whocreateid, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.whocreateid, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.whocreateid, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.createdate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.createdate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.createdate, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="添 加" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("返 回", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryval", "~/Scripts/ueditor-utf8/ueditor.config.js", "~/Scripts/ueditor-utf8/ueditor.all.js")
    <script type="text/javascript">
            var editor = new baidu.editor.ui.Editor({
            UEDITOR_HOME_URL: '/Scripts/ueditor-utf8/',//配置编辑器路径   也可以在ueditor.config.js文件中配置。
            iframeCssUrl: '/Scripts/ueditor-utf8/themes/iframe.css',//样式路径
            // initialContent:'欢迎使用ueditor',//初始化编辑器内容
            autoHeightEnabled:true,//高度自动增长
            initialFrameHeight:400  //配置编辑器的初始高度为400px。
            });
            editor.render('request_text');   //将编辑器装入 ID=Content 的文本域中。
    </script>
}
<script src="../../Scripts/pikaday.js"></script>
<script>
    var picker = new Pikaday(
    {
        field: document.getElementById('datepicker1'),
        firstDay: 1,
        minDate: new Date('2000-01-01'),
        maxDate: new Date('2020-12-31'),
        yearRange: [1950,2050]
    });
    var picker2 = new Pikaday(
    {
        field: document.getElementById('datepicker2'),
        firstDay: 1,
        minDate: new Date('2000-01-01'),
        maxDate: new Date('2020-12-31'),
        yearRange: [1950, 2050]
    });
</script>